//// ****** THIS FILE IS AUTOGENERATED ******
////
////          >>>> PLEASE ADAPT IT TO YOUR NEEDS <<<<
////
/// 
///  Filename; D:\Insturmentacion 1C2019\Instrumentacion\Practica especial\PIDDRIVER.py
///  Source class: FLOWPIDDriver
///  Generation timestamp: 2019-06-18T17:00:01.433860
///  Class code hash: b4513fff6bb16d2ee86ec4e6995533d4e153bd09
///
/////////////////////////////////////////////////////////////



#include "inodriver_user.h"

//PID constants
double kp = 2
double ki = 5
double kd = 1
double flow_value = 0
 
unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
double input, output, setPoint;
double cumError, rateError;

void user_setup() {

   setPoint = 0;                          //set point at zero degrees
  
}

void user_loop() {

          input = analogRead(A0);                //read from rotary encoder connected to A0
        output = computePID(input);
        delay(100);
        analogWrite(3, output);                //control the motor based on PID value
        
}

double computePID(double inp){     
        currentTime = millis();                //get current time
        elapsedTime = (double)(currentTime - previousTime);        //compute time elapsed from previous computation
        
        error = Setpoint - inp;                                // determine error
        cumError += error * elapsedTime;                // compute integral
        rateError = (error - lastError)/elapsedTime;   // compute derivative
 
        double out = kp*error + ki*cumError + kd*rateError;                //PID output               
 
        lastError = error;                                //remember current error
        previousTime = currentTime;                        //remember current time
 
        return out;                                        //have function return the PID output
}


// Aca arrancan las funciones que defino desde Python
// COMMAND: Flow_value, FEAT: flow_value

float get_Flow_value() {
  return flow_value;
};

int set_Flow_value(float value) {

  flow_value = value
  return 0;
};


// COMMAND: Pump_Flow, FEAT: pump_flow
float get_Pump_Flow(int key) {
  return 0.0;
};

int set_Pump_Flow(int key, float value) {
  return 0;
};


// COMMAND: Control_Loop_enabled, FEAT: control_loop_enabled
int get_Control_Loop_enabled() {

  if get_Flow_value
  return 0;
};

int set_Control_Loop_enabled(int value) {
  return 0;
};


// COMMAND: Ki, FEAT: Ki
float get_Ki() {
  return ki;
};

int set_Ki(float value) {

  ki = value
  
  return 0;
};

// COMMAND: Kd, FEAT: Kd
float get_Kd() {
  return kd;
};

int set_Kd(float value) {

 kd = value
 
  return 0;
};


// COMMAND: Kp, FEAT: Kp
float get_Kp() {

  return kp;
};

int set_Kp(float value) {

  kp = value;
  
  return 0;
};


// COMMAND: Set_Point, FEAT: set_point
float get_Set_Point() {

  return setPoint;
};

int set_Set_Point(float value) {

  setPoint = value
  
  return 0;
};





